
    ## Tuesday November 19, 2019 ##
    
======Mark-and-sweep======
	stop and go collector (ref count was incremental)

Technique:
	the root set - set of memory locations in the program that are known immediately to be reachable (elements on the stack)

	any objects reachable from the root set are reachable
		otherwise, not reachable

	make one pass to mark reachable/not reachable
	make another pass ("sweep") to collect them

	marking phase:
		add root set to a worklist
		while worklist not empty:
			remove object from the worklist
			if not marked, mark and add to worklist all objects reachable from that object
	sweeping phase:
		reclaim free memory
		for each allocated object:
			if object is NOT marked, remove it 
			if obejct is marked, clear the mark

Problems:
	must go through all objects to free them or clear marks
	amount of space for worklist could be as large as all of memory

Implementation:
	every block would be in 1 of 4 states:
		Marked - known to be reachable
		Enqueued- object is in the worklist
		Unknown- object has not been seen yet
		Deallocated- object has been freed

Advantages:
	precisely finds all reachable objects
	w/ Baker's algorithm, runs in O(n) where n = number of reachable objects

Disadvantages: 
	May introduce huge pause times (stop the world)
	Linked list/ state information in each allocated block uses lots of memory per object

======Stop-and-copy======
	compacting collector

Improving performance:
	increasing locality
		- use the cache
		- placing objects in consecutive memory can reduce cache misses
		- move all objects in memory so they are adjacent to one another 
			compaction

		collector 
	increasing allocation speed
		- typically use free lists (linked lists of free memory blocks)
		- divides all memory in half ('old' and 'new')
		we allocate memory at the 'free space pointer' in 'new space'
		when we run out of space, stop-and-copy
			move everything 

Detail:
	partition memory into new and old spaces
	keep track of free space pointer
	allocate n bytes of memory

	if n bytes exist at the FSP, use bytes and advance the pointer
	otherwise, copy

	copy:
		copy all objects that are reachable
		recursively copy all objects reachable from that object from the old space to the new space

		change object pointers
			first, bitwise copy of object
				all pointers pointing to original locations
			set "forwarding pointer" of original object to point to the new objects
			after cloning each object, for each pointer:
				follow the pointer to the object it references
				[something I couldnt write down]

Advantages:
	simple to implement
	fast memory allocation
	excellent locality

Disadvantages:
	Requires half of memory to be free at all times
	collection time proportional to # of bytes used by objects

======Hybrid Approaches======

The best GC's are combinations of smaller collectors

"Objects Die Young"
	objects allocated locally in a function
	temporary objects used to construct larger objects

Optimize GC to reclaim young objects rapidly while spending less time on older objects

Generational GC

	partition memory into several "generations"
	always allocated in first generation
	when first generation fills up, collect garbage
	runs quickly:
		collects only small region of memory
		all surviving objects move to next generation

	when all generations fill up, run a big GC over everything

Technique:
	use stop and copy collector in the Eden space (allocation space)
	Eden moves elements to the survivor space
	Survive long enough and move to tenured space

	when memory fills up, full GC (mark and sweep) tenured objects

============================================
============================================

Intermediate code generation
	three address code

can be implemented using syntax-directed translation

different kinds of I languages

high level IR:	
	expresses high level structure of a program (syntax tress, direct acyclic graphs)
	easy to generate from input
	difficult optimizations
low level IR:
	closer to target language (RTL, three address code)
	very simple operations

three address code:
	X := Y op Z

	X,Y,Z are names, constants, or temporaries
	only one operation on RHS
	expressions generated using temporaries

	assignment, jumps, procedure call/return, indexed assignment, address and pointer assignments, and labels

control flow graph
	