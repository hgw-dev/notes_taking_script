
    ## Thursday January 16, 2020 ##
    
an interrupt gate = entry in the interrupt table
interrupt table = array of ptrs to exception handlers 
	code used by HW
setGate() sets a gate in that table

trapframe is where registers are stored when the exception is triggered

argint()/ argfd()/... read trapframe

stacks in memory
	higher addresses are for kernel 
		only accessible in kernel mode
		simple mapping to physical disk (straight mapping)
	smaller addresses are for applications

processor switches stacks on trap 
one kernel stack per user thread (plus extra stack for switching threads)
	makes writing system call handlers easier
		- keep data on stack, even if system call involves waiting for a while 
		- no worry about stack being used by someone else
	but uses more space 
		- extra 4KB of storage per thread/process

nested exception during system call
	uses current kernel stack with same stack pointer

---non-system call exceptions---

timer interrupt - 'tick' from constantly running timer
	checks for infinite loops
	checks for programs waiting for time to pass

faults - access invalid memory, divide by 0
	kills the program 

I/O - keypress, wake up waiting programs 

set every entry of interrupt table to assembly function vectors[i] that saves registers, then calls trap()

in trap, switch statement for trapno
	default case prints debug info, then kills the process
		- prints out trapno, can lookup in `traps.h`
		- handles faults

	I/O cases call device exception handler and lapiceoi(), which stops exception unless new exception occurs

	timer interrupt looks like I/O device
		- call yield() if timer interrupt is called, and another process is running
		- wakeup() is called to handle waiting processes 
		- lapiceoi() is also called

time multiplexing 
	- operating system switches between running concurrent processes 
	- exception occurs during switch, check if process needs to be killed, return to a DIFFERENT process
		- save old program counter, registers in OS memory
			- saved in trapframe, just like exception handler
		- sets new registers, jumps to new program counter
		- called 'context switch'

context
	- all register values
	- condition codes
	- program counter
	- address space = page table base pointer

exercise: counting context switches
	two active processes:
		A: running infinite loop
		B: 
			- asks to read from keyboard
			- after input is available, B reads from file
			- then B does a computation and writes the result to the screen

	how many system calls do we expect?
	3+ (one from each of the 3 steps of B, then any additional system calls needed to handle those 3 events)

	how many context switches do we expect?
	runs A when B is waiting for keyboard input, file from disk, and display, and potentially more 

context switch 
	switches to kernel mode, 
	start trap handler,
	save A's user regs to kernel stack
	swtch() to different kernel stack
	exit trap handler
	restore B's user regs from kernel stack
	switches back to user mode

save/restore on trap() entry/exit
	first thing on kernel stack
save/restore process's saved kernel registers on process's kernel stack
process control block stored process's kernel stack pointer
swtch() takes both process's kernel stack pointers as args
	void swtch(struct context **old, struct context **new) 
	save current context into *old

	in C:
		/* switch from A to B */
		swtch(&(a->context), b->context);

		/* switch from B to A */
		swtch(&(b->context), a->context);

swtch(A, B) pseudocode:
	- save caller-saved registers to stackA
	- write swtch return address to stackA 
	- write all callee-saved registers to stackA
	- save old stackA point to arg A
	- read B arg as new stackB pointer
	- read all callee-saved registers from stackB
	- read+use swtch return address from stackB 
	- restore caller-saved registers from stackB 

missing pieces:
	- trap handler saving/restoring registers
	- changing address spaces: switchuvm 
	- starting new thread

