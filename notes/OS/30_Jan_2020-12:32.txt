
    ## Thursday January 30, 2020 ##
    
scheduling 
thread vs process
	thread part on processor core
	each process has one thread
CPU bursts
scheduling metrics
	turnaround time: becomes runnable to becomes not-running/runnable
	wait time: turnaround time minus time spent running
	throughput: amount of useful work done per unit time
	fairness

focus on minimizing mean/total turnaround time
	thread becomes ready until thread done being ready

imperfect approx of interactivity/responsiveness on desktop
	why imperfect?
		bc does not take into account how much it is being used by a human 

trivial scheduling algorithms
	first come first serve (FCFS)/ FIFO
		simplest (?)
		no preemption - run code until it can't 
		doesn't stop and switch running code

		"convoy effect" - things have lots to do, but delayed by long computation
			have to wait in line behind long process
		order matters!

	round robin (RR)
		simplest (?) preemptive algo
		run program until
			it cant run OR
			it runs for too long (exceeds "time quantum")

		requires good way of interrupting programs
			like xv6 timer interrupt  	
		requires good way of stopping programs whenever
			like xv6 context switches

		choose time quantum Q
		switch to next process in ready queue after Q expires
		this is what xv6 scheduler does
			scheduler runs from timer interrupt (or if process not runnable)
			finds next runnable process in process table

		if Q is infinity, becomes FCFS
		smaller Q, more fair, worse throughput

		order doesnt matter BUT more context switches
			more fair BUT lower throughput

context switch overhead
	typical context switch ~ .01 ms to .1 ms 
		tricky: lot of indirect cost (cache misses)
	choose time quantum to manage this overhead
	current linux default (between .75ms and 6ms)
	historically common: 1ms to 100ms 
		1% to .1% overhead

FCFS orders
	lowest turnaround time is when programs ordered with increasing computation time

	intuition 1: race to go to sleep
	intuition 2: minimize time two threads waiting

	later: use this to make scheduler that minimizes mean turnaround time

some users are more equal
	shells more important than big computation?
	faculty more important than students?
	scheduling algorithm: schedule shells/ faculty programs first

	use priority scheduling 		

priority scheduling 		
	choose process from ready queue for highest priority 
		within each priority, use other scheduling algo (RR) 
	could have each process have unique priority

	could cause "starvation"
		never get resources because of higher priority
		big reason to have "fairness" metric

minimizing turnaround time
	FCFS best order with shortest CPU bursts
	schedule by shortest job first (SJF)
	make a priority scheduler, prioritizing CPU bursts

	non-preemptive
		shortest CPU burst not run immediately still has convoy effect

	preemption
		stopping a running program to run another program
		needs to set priority to remaining time!
		called shortest remaining time first (SRTF)

	cant be fair AND minimize turnaround time! 
		conflicting goals

	SJF minimizes turnaround time
		if you disallow preemption/leaving CPU idle
	SRTF minimizes turnaround time
		if you ignore context switch costs

knowing CPU burst lengths
	sometimes you can ask
		batch job scheduling systems do this
		MAYBE will get an accurate answer

	worst case:
		run program to figure it out

	but heuristics can figure it out (no guarantee)
	key observation: CPU bursts now are like CPU bursts later

multi-level feedback queues
	classic strategy based on priority scheduling
	combines update time estimates and running shorter times first
	key idea:
		current priority ~=~ current time estimate
	smallish number of time estimate "buckets"

	setup:
		place processes at priority based on CPU burst time
		dynamically adjust priorities based on observed CPU burst times
		priority level -> allowed/expected Q
			RR at each priority with different Q	

	run highest priority process 
		either used whole timeslice
			add to lower priority
		OR finished early
			add to higher priority

	
