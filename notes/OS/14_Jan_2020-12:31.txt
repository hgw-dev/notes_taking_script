
    ## Tuesday January 14, 2020 ##
    
final may 4th @ 7pm

what OSes do:
	- referee = resource sharing, protection, isolation
	- illusionist = clean, easy abstractions
	- glue = common services (storage, window systems, auth, networking...)

virtual machine interface - between application and operating system
physical machine interface - between operating system and hardware

process VM abstracts hardware
	- thread | processors
	- memory allocation | page tables
	- files | devices (open, read, write, close interface)

OS translates high level (threads, sockets, files, address spaces) to low level hardware usage (interrupts, memory addresses)
application's "machine" is the OS
a running program/application is called a process
a process has threads (registers in the CPU) and memory
can abstract threads to memory if inactive 
context switch (swap threads in CPU and threads in memory)

files abstract I/O devices (keyboard, mouse, monitor, disk, network, ...)
OS also handles failed applications (segmentation fault)

process (thread(s) + address space) is an illusion of dedicated machine:
	thread = illusion of CPU
	address space = illusion of own memory

OS must run multiple applications,
	keep them from crashing OS,
	keep them from crashing each other,
	keep OS from crashing itself

dual-mode operation
	processor has two modes (or more): 
		- kernel mode (privileged)
		- user mode
	some operations require kernel mode
	OS controls what runs in kernel mode

address translation
	allow some parts of memory to be accessed by kernel mode
	let OS determine mapping of program to its accessible memory
	"page table"

exception/interrupts/traps/faults
	hardware support for OS responding to events
	user code ALWAYS runs in user mode (even with sudo)
	only OS code ever runs in kernel mode 

	on exception, changes from user to kernel mode 
		ONLY mechanism for doing so 

	this is how the OS chooses what runs in kernel mode

kernel services
	allocating memory? change address space
	reading/writing file? communicate with hard drive
	read input? communicate with keyboard
	all need privileged instructions (kernel mode)

	therefore, use deliberate exceptions "trap"
		works like normal exception
		starts executing OS-chosen handler in kernel mode
		handler decides what program can request

		Linux uses register setup and then 'syscall'
		pointer to syscall_handler set during boot

normally, applications call standard libraries, which call system calls 
we will be focusing on kernel operations

