
    ## Tuesday February 04, 2020 ##
    

MLFQs can be cheated
	by adding small I/O cpu yield to long computation
	this promotes the program to a higher priority

	can still experience starvation because of unfairness
		lots of high priority programs

	oscillating between two priority levels not great for predictability

different kinds of MLFQ
	to prevent starvation:
		dont increase priority when whole timeslice not used
			instead keep the same - more stable
		periodically increase priority of *all threads*
			allow compute-heavy threads to run a little
			still deals with thread's behavior changing over time
			replaces finer-grained upward adjustments
		DOES NOT MINIMIZE TURNAROUND TIME
	FreeBSD scheduler
		currently based on MLFQ idea
			time quantums dont depend on priority
			computes interactivity score 
				using recent history of thread
				~=~ (I/O wait)/(I/O wait + running)
			thread priorities set based on interactivity score 

fair scheduling
	every thread has an equal chance to be chosen

	random scheduling - choose uniformly at random
		good for "fairness"
		bad for response time
		bad for predictability

	idea: proportional share
		equitable share for threads based on importance

lottery scheduling
	every thread has a certain number of tickets
	assign each thread that number of numbered tickets
	pick a random number
	run that thread for the time quantum 

	can be used to approximate other schedulers
		priority - letting ticket numbers be extremely distant
			A = 1M, B = 1K, C = 1
			very close to strict priority

	problems:
		large variation in actual runtime
		not predictable

measuring fairness
	don't consider what happens when programs waiting for I/O
	give program credit for time not running while waiting for I/O
	max-min fairness
		maximize minimum resource given to anyone

Linux's scheduler
	deterministic proportional share scheduler
	Completely Fair Scheduler (CFS)

	no randomization
	O(log N) scheduling decision
	favors interactive programs
	adjusts time quantums dynamically
		shorter time quantum if many things to run

	each thread has a "virtual runtime" (how long its run)
	incremented when run 
	more/less important? multiply adjustments by factor
	
	adjustments for threads are new or were sleeping
		too big an advantage to start at runtime 0

	scheduling decision: run thread with lowest virtual runtime
		data structure: balanced tree

